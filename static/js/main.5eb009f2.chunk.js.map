{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","FlowEditor","isMarkActive","editor","format","marks","Editor","isBlockActive","nodes","n","type","isAlignActive","align","toggleMark","removeMark","addMark","toggleBlock","isActive","Transforms","setNodes","isBlock","toggleAlign","Leaf","attributes","children","leaf","bold","code","italic","underline","strikethrough","subscript","superscript","Element","element","className","Tools","props","icon","faBold","faItalic","faUnderline","faStrikethrough","faCode","faSubscript","faSuperscript","faParagraph","faHeading","faAlignLeft","faAlignCenter","faAlignRight","faAlignJustify","Breadcrumb","BreadcrumbItem","href","active","FormatButton","toggleFormat","label","useSlate","Button","aria-label","variant","onMouseDown","event","preventDefault","fixedWidth","BlockButton","MarkButton","AlignButton","ReactDOM","render","useMemo","withHistory","withReact","createEditor","useState","JSON","parse","localStorage","getItem","text","value","setValue","renderLeaf","useCallback","renderElement","onChange","content","stringify","setItem","spellCheck","autoFocus","onKeyDown","ctrlKey","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5eb009f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {  \n    useMemo,\n    useState,\n    useCallback\n} from \"react\";\n\nimport ReactDOM from 'react-dom'\n\nimport {\n    createEditor,\n    Transforms,\n    Editor\n} from 'slate'\n\nimport {\n    Slate,\n    useSlate,\n    Editable,\n    withReact\n} from 'slate-react'\n\nimport {\n    withHistory\n} from 'slate-history'\n\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button\n} from 'react-bootstrap'\n\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome'\n\nimport {\n    faBold,\n    faItalic,\n    faUnderline,\n    faStrikethrough,\n    faCode,\n    faSubscript,\n    faSuperscript,\n    faParagraph,\n    faHeading,\n    faAlignLeft,\n    faAlignCenter,\n    faAlignRight,\n    faAlignJustify\n} from '@fortawesome/free-solid-svg-icons'\n\nimport * as serviceWorker from './serviceWorker.js'\nimport './index.scss';\n\nconst FlowEditor = {\n    isMarkActive(editor, format) {\n        const marks = Editor.marks(editor)\n        return marks ? marks[format] === true : false\n    },\n\n    isBlockActive(editor, format) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.type === format,\n        })\n\n        return !!match\n    },\n\n    isAlignActive(editor, align) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.align === align,\n        })\n\n        return !!match\n    },\n\n    toggleMark(editor, format) {\n        const isActive = FlowEditor.isMarkActive(editor, format)\n        if (isActive) {\n            Editor.removeMark(editor, format)\n        } else {\n            Editor.addMark(editor, format, true)\n        }\n    },\n\n    toggleBlock(editor, format) {\n        const isActive = FlowEditor.isBlockActive(editor, format)\n        Transforms.setNodes(editor, {\n            type: isActive ? null : format\n        }, {\n            match: n => Editor.isBlock(editor, n)\n        })\n    },\n\n    toggleAlign(editor, align) {\n        const isActive = FlowEditor.isAlignActive(editor, align)\n        Transforms.setNodes(editor, {\n            align: isActive ? null : align\n        }, {\n            match: n => Editor.isBlock(editor, n)\n        })\n    }\n}\n\nconst Flow = () => {\n    const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem('content')) || [\n        {\n            type: 'paragraph',\n            align: 'text-left',\n            children: [{ text: '' }],\n        },\n    ])\n\n    const renderLeaf = useCallback(props => {\n        return <Leaf {...props} />\n    }, [])\n\n    const renderElement = useCallback(props => {\n        return <Element {...props} />\n    }, [])\n\n    return (\n        <Slate\n            editor={editor}\n            value={value}\n            onChange={value => {\n                setValue(value)\n                const content = JSON.stringify(value)\n                localStorage.setItem('content', content)\n            }}\n        >\n            <Tools className='d-print-none sticky-top bg-light' />\n            <Editable className='p-5'\n                renderLeaf={renderLeaf}\n                renderElement={renderElement}\n                spellCheck\n                autoFocus\n                onKeyDown={event => {\n                    if (event.ctrlKey) {\n                        switch (event.key) {\n                            case 'b': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'bold')\n                                break\n                            }\n                            case 'i': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'italic')\n                                break\n                            }\n                            case 'u': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'underline')\n                                break\n                            }\n                            case '`': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'code')\n                                break\n                            }\n                            default:\n                                break\n                        }\n                    }\n                }}\n            />\n        </Slate>\n    )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    if (leaf.strikethrough) {\n        children = <s>{children}</s>\n    }\n\n    if (leaf.subscript) {\n        children = <sub>{children}</sub>\n    }\n\n    if (leaf.superscript) {\n        children = <sup>{children}</sup>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\n\nconst Element = ({ attributes, children, element }) => {\n    switch (element.type) {\n        case 'heading-one':\n            return <h1 className={element.align} {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 className={element.align} {...attributes}>{children}</h2>\n        case 'heading-three':\n            return <h3 className={element.align} {...attributes}>{children}</h3>\n        case 'heading-four':\n            return <h4 className={element.align} {...attributes}>{children}</h4>\n        case 'heading-five':\n            return <h5 className={element.align} {...attributes}>{children}</h5>\n        case 'heading-six':\n            return <h6 className={element.align} {...attributes}>{children}</h6>\n        case 'paragraph':\n            return <p className={element.align} {...attributes}>{children}</p>\n        default:\n            return <div className={element.align} {...attributes}>{children}</div>\n    }\n}\n\nconst Tools = props => {\n    return (\n        <div {...props}>\n            <MarkButton format='bold' icon={faBold} />\n            <MarkButton format='italic' icon={faItalic} />\n            <MarkButton format='underline' icon={faUnderline} />\n            <MarkButton format='strikethrough' icon={faStrikethrough} />\n            <MarkButton format='code' icon={faCode} />\n            <MarkButton format='subscript' icon={faSubscript} />\n            <MarkButton format='superscript' icon={faSuperscript} />\n            <BlockButton format='paragraph' icon={faParagraph} />\n            <BlockButton format='heading-one' icon={faHeading} />\n            <AlignButton format='text-left' icon={faAlignLeft} />\n            <AlignButton format='text-center' icon={faAlignCenter} />\n            <AlignButton format='text-right' icon={faAlignRight} />\n            <AlignButton format='text-justify' icon={faAlignJustify} />\n            <Breadcrumb>\n                <BreadcrumbItem href='#'>Storage</BreadcrumbItem>\n                <BreadcrumbItem href='#' active>content</BreadcrumbItem>\n            </Breadcrumb>\n        </div>\n    )\n}\n\nconst FormatButton = ({ isActive, toggleFormat, format, icon, label}, props) => {\n    const editor = useSlate()\n    return (\n        <Button {...props}\n            aria-label={format}\n            className='rounded-0 border-0'\n            variant='outline-primary'\n            active={isActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleFormat(editor, format)\n            }}\n        >\n            <FontAwesomeIcon\n                icon={icon}\n                fixedWidth\n            />\n            {label}\n        </Button>\n    )\n}\n\nconst BlockButton = ({ format, icon, label }, props) => {\n    return (\n        <FormatButton {...props}\n            isActive={FlowEditor.isBlockActive}\n            toggleFormat={FlowEditor.toggleBlock}\n            format={format}\n            icon={icon}\n            label={label}\n        />\n    )\n}\n\nconst MarkButton = ({ format, icon, label }, props) => {\n    return (\n        <FormatButton {...props}\n            isActive={FlowEditor.isMarkActive}\n            toggleFormat={FlowEditor.toggleMark}\n            format={format}\n            icon={icon}\n            label={label}\n        />\n    )\n}\n\nconst AlignButton = ({ format, icon, label }, props) => {\n    return (\n        <FormatButton {...props}\n            isActive={FlowEditor.isAlignActive}\n            toggleFormat={FlowEditor.toggleAlign}\n            format={format}\n            icon={icon}\n            label={label}\n        />\n    )\n}\n\nReactDOM.render(<Flow />, document.getElementById('editor'))\n\n// If you want your editor to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// See the serviceWorker.js script for details.\nserviceWorker.unregister()\n"],"sourceRoot":""}