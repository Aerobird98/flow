{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Leaf","attributes","children","leaf","bold","code","italic","underline","strike","subscript","superscript","Element","element","type","className","icon","faLightbulb","FlowEditor","isMarkActive","editor","format","marks","Editor","isBlockActive","nodes","n","toggleMark","removeMark","addMark","toggleBlock","isActive","LIST_TYPES","isList","includes","Transforms","unwrapNodes","split","setNodes","isBlock","block","wrapNodes","defaultValue","text","BlockButton","useSlate","onMouseDown","event","preventDefault","fixedWidth","MarkButton","ReactDOM","render","useMemo","withHistory","withReact","createEditor","useState","JSON","parse","localStorage","getItem","value","setValue","renderLeaf","useCallback","props","renderElement","onChange","content","stringify","setItem","faBold","faItalic","faUnderline","faStrikethrough","faCode","faSubscript","faSuperscript","faHeading","faQuoteLeft","faListUl","faListOl","placeholder","onKeyDown","ctrlKey","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCJAC,EAAO,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KA6BlC,OA5BIA,EAAKC,OACLF,EAAW,gCAASA,IAGpBC,EAAKE,OACLH,EAAW,8BAAOA,IAGlBC,EAAKG,SACLJ,EAAW,4BAAKA,IAGhBC,EAAKI,YACLL,EAAW,2BAAIA,IAGfC,EAAKK,SACLN,EAAW,2BAAIA,IAGfC,EAAKM,YACLP,EAAW,6BAAMA,IAGjBC,EAAKO,cACLR,EAAW,6BAAMA,IAGd,yBAAUD,EAAaC,IAG5BS,EAAU,SAAC,GAAuC,IAArCV,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,SAC3B,OADmD,EAAdU,QACrBC,MACZ,IAAK,cACD,OAAO,uBAAQZ,EAAaC,GAChC,IAAK,cACD,OAAO,uBAAQD,EAAaC,GAChC,IAAK,gBACD,OAAO,uBAAQD,EAAaC,GAChC,IAAK,eACD,OAAO,uBAAQD,EAAaC,GAChC,IAAK,eACD,OAAO,uBAAQD,EAAaC,GAChC,IAAK,cACD,OAAO,uBAAQD,EAAaC,GAChC,IAAK,cACD,OAAO,+BAAgBD,EAAaC,GACxC,IAAK,YACD,OAAO,uBAAQD,EAAY,0BAAMa,UAAU,SAAQ,kBAAC,IAAD,CAAiBC,KAAMC,OAAuBd,GACrG,IAAK,iBACD,OAAO,sCAAIY,UAAU,SAAYb,GAAaC,GAClD,IAAK,eACD,OAAO,uBAAQD,EAAaC,GAChC,QACI,OAAO,sBAAOD,EAAaC,KAIjCe,EAAa,CACfC,aADe,SACFC,EAAQC,GACjB,IAAMC,EAAQC,IAAOD,MAAMF,GAC3B,QAAOE,IAA0B,IAAlBA,EAAMD,IAGzBG,cANe,SAMDJ,EAAQC,GAAS,IAAD,EACVE,IAAOE,MAAML,EAAQ,CACjCpB,MAAO,SAAA0B,GAAC,OAAIA,EAAEZ,OAASO,KAG3B,QAL0B,qBAQ9BM,WAde,SAcJP,EAAQC,GACEH,EAAWC,aAAaC,EAAQC,GAG7CE,IAAOK,WAAWR,EAAQC,GAE1BE,IAAOM,QAAQT,EAAQC,GAAQ,IAIvCS,YAxBe,SAwBHV,EAAQC,GAChB,GAAe,cAAXA,EAAJ,CAIA,IAAMU,EAAWb,EAAWM,cAAcJ,EAAQC,GAE5CW,EAAa,CAAC,eAAgB,kBAC9BC,EAASD,EAAWE,SAASb,GAYnC,GAVAc,IAAWC,YAAYhB,EAAQ,CAC3BpB,MAAO,SAAA0B,GAAC,OAAIM,EAAWE,SAASR,EAAEZ,OAClCuB,OAAO,IAGXF,IAAWG,SAASlB,EAChB,CAAEN,KAAMiB,EAAW,KAAOE,EAAS,YAAcZ,GACjD,CAAErB,MAAO,SAAA0B,GAAC,OAAIH,IAAOgB,QAAQnB,EAAQM,OAGpCK,GAAYE,EAAQ,CACrB,IAAMO,EAAQ,CAAE1B,KAAMO,EAAQlB,SAAU,IACxCgC,IAAWM,UAAUrB,EAAQoB,OAKnCE,EAAe,CACjB5B,KAAM,YACNX,SAAU,CACN,CACIwC,KAAM,oCA+EZC,EAAc,SAAC,GAAsB,IAApBvB,EAAmB,EAAnBA,OAAQL,EAAW,EAAXA,KACrBI,EAASyB,cACf,OACI,0BAAM9B,UAAW,OAASG,EAAWM,cAAcJ,EAAQC,GAAU,UAAY,aAC7EyB,YAAa,SAAAC,GACTA,EAAMC,iBACN9B,EAAWY,YAAYV,EAAQC,KAGnC,kBAAC,IAAD,CAAiBL,KAAMA,EAAMiC,YAAU,MAK7CC,EAAa,SAAC,GAAsB,IAApB7B,EAAmB,EAAnBA,OAAQL,EAAW,EAAXA,KACpBI,EAASyB,cACf,OACI,0BAAM9B,UAAW,OAASG,EAAWC,aAAaC,EAAQC,GAAU,UAAY,aAC5EyB,YAAa,SAAAC,GACTA,EAAMC,iBACN9B,EAAWS,WAAWP,EAAQC,KAGlC,kBAAC,IAAD,CAAiBL,KAAMA,EAAMiC,YAAU,MAKnDE,IAASC,OAAO,mBAtGH,WACT,IAAMhC,EAASiC,mBAAQ,kBAAMC,YAAYC,YAAUC,kBAAkB,IADtD,EAEWC,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,CAACnB,IAFpE,mBAERoB,EAFQ,KAEDC,EAFC,KAITC,EAAaC,uBAAY,SAAAC,GAC3B,OAAO,kBAAC,EAASA,KAClB,IAEGC,EAAgBF,uBAAY,SAAAC,GAC9B,OAAO,kBAAC,EAAYA,KACrB,IAEH,OACI,kBAAC,IAAD,CACI9C,OAAQA,EACR0C,MAAOA,EACPM,SAAU,SAAAN,GACNC,EAASD,GACT,IAAMO,EAAUX,KAAKY,UAAUR,GAC/BF,aAAaW,QAAQ,UAAWF,KAGpC,yBAAKtD,UAAU,SACX,kBAAC,EAAD,CAAYM,OAAO,OAAOL,KAAMwD,MAChC,kBAAC,EAAD,CAAYnD,OAAO,SAASL,KAAMyD,MAClC,kBAAC,EAAD,CAAYpD,OAAO,YAAYL,KAAM0D,MACrC,kBAAC,EAAD,CAAYrD,OAAO,SAASL,KAAM2D,MAClC,kBAAC,EAAD,CAAYtD,OAAO,OAAOL,KAAM4D,MAChC,kBAAC,EAAD,CAAYvD,OAAO,YAAYL,KAAM6D,MACrC,kBAAC,EAAD,CAAYxD,OAAO,cAAcL,KAAM8D,MACvC,kBAAC,EAAD,CAAazD,OAAO,cAAcL,KAAM+D,MACxC,kBAAC,EAAD,CAAa1D,OAAO,cAAcL,KAAMgE,MACxC,kBAAC,EAAD,CAAa3D,OAAO,iBAAiBL,KAAMiE,MAC3C,kBAAC,EAAD,CAAa5D,OAAO,eAAeL,KAAMkE,OAE7C,kBAAC,IAAD,CACIlB,WAAYA,EACZG,cAAeA,EACfgB,YAAY,4BACZC,UAAW,SAAArC,GACP,GAAKA,EAAMsC,QAIX,OAAQtC,EAAMuC,KACV,IAAK,IACDvC,EAAMC,iBACN9B,EAAWS,WAAWP,EAAQ,QAC9B,MAEJ,IAAK,IACD2B,EAAMC,iBACN9B,EAAWS,WAAWP,EAAQ,UAC9B,MAEJ,IAAK,IACD2B,EAAMC,iBACN9B,EAAWS,WAAWP,EAAQ,aAC9B,MAEJ,IAAK,IACD2B,EAAMC,iBACN9B,EAAWS,WAAWP,EAAQ,eAwC1C,MAAUmE,SAASC,eAAe,WDxG5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b5b3606.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useMemo, useState, useCallback } from \"react\";\nimport ReactDOM from 'react-dom'\n\nimport { createEditor, Transforms, Editor } from 'slate'\nimport { Slate, useSlate, Editable, withReact } from 'slate-react'\nimport { withHistory } from 'slate-history'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBold, faItalic, faUnderline, faStrikethrough, faCode, faSubscript, faSuperscript, faHeading, faQuoteLeft, faListOl, faListUl, faLightbulb } from '@fortawesome/free-solid-svg-icons'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    if (leaf.strike) {\n        children = <s>{children}</s>\n    }\n\n    if (leaf.subscript) {\n        children = <sub>{children}</sub>\n    }\n\n    if (leaf.superscript) {\n        children = <sup>{children}</sup>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\n\nconst Element = ({ attributes, children, element }) => {\n    switch (element.type) {\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>\n        case 'heading-three':\n            return <h3 {...attributes}>{children}</h3>\n        case 'heading-four':\n            return <h4 {...attributes}>{children}</h4>\n        case 'heading-five':\n            return <h5 {...attributes}>{children}</h5>\n        case 'heading-six':\n            return <h6 {...attributes}>{children}</h6>\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>\n        case 'list-item':\n            return <li {...attributes}><span className='fa-li'><FontAwesomeIcon icon={faLightbulb} /></span>{children}</li>\n        case 'unordered-list':\n            return <ul className='fa-ul' {...attributes}>{children}</ul>\n        case 'ordered-list':\n            return <ol {...attributes}>{children}</ol>\n        default:\n            return <p {...attributes}>{children}</p>\n    }\n}\n\nconst FlowEditor = {\n    isMarkActive(editor, format) {\n        const marks = Editor.marks(editor)\n        return marks ? marks[format] === true : false\n    },\n\n    isBlockActive(editor, format) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.type === format,\n        })\n\n        return !!match\n    },\n\n    toggleMark(editor, format) {\n        const isActive = FlowEditor.isMarkActive(editor, format)\n\n        if (isActive) {\n            Editor.removeMark(editor, format)\n        } else {\n            Editor.addMark(editor, format, true)\n        }\n    },\n\n    toggleBlock(editor, format) {\n        if (format === 'list-item') {\n            return\n        }\n\n        const isActive = FlowEditor.isBlockActive(editor, format)\n\n        const LIST_TYPES = ['ordered-list', 'unordered-list']\n        const isList = LIST_TYPES.includes(format)\n\n        Transforms.unwrapNodes(editor, {\n            match: n => LIST_TYPES.includes(n.type),\n            split: true,\n        })\n\n        Transforms.setNodes(editor,\n            { type: isActive ? null : isList ? 'list-item' : format },\n            { match: n => Editor.isBlock(editor, n) }\n        )\n\n        if (!isActive && isList) {\n            const block = { type: format, children: [] }\n            Transforms.wrapNodes(editor, block)\n        }\n    },\n}\n\nconst defaultValue = {\n    type: 'paragraph',\n    children: [\n        {\n            text: 'A line of text in a paragraph.'\n        },\n    ]\n}\n\nconst Flow = () => {\n    const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem('content')) || [defaultValue])\n\n    const renderLeaf = useCallback(props => {\n        return <Leaf {...props} />\n    }, [])\n\n    const renderElement = useCallback(props => {\n        return <Element {...props} />\n    }, [])\n\n    return (\n        <Slate\n            editor={editor}\n            value={value}\n            onChange={value => {\n                setValue(value)\n                const content = JSON.stringify(value)\n                localStorage.setItem('content', content)\n            }}\n        >\n            <div className='tools'>\n                <MarkButton format='bold' icon={faBold} />\n                <MarkButton format='italic' icon={faItalic} />\n                <MarkButton format='underline' icon={faUnderline} />\n                <MarkButton format='strike' icon={faStrikethrough} />\n                <MarkButton format='code' icon={faCode} />\n                <MarkButton format='subscript' icon={faSubscript} />\n                <MarkButton format='superscript' icon={faSuperscript} />\n                <BlockButton format='heading-one' icon={faHeading} />\n                <BlockButton format='block-quote' icon={faQuoteLeft} />\n                <BlockButton format='unordered-list' icon={faListUl} />\n                <BlockButton format='ordered-list' icon={faListOl} />\n            </div>\n            <Editable\n                renderLeaf={renderLeaf}\n                renderElement={renderElement}\n                placeholder=\"Compose something epic...\"\n                onKeyDown={event => {\n                    if (!event.ctrlKey) {\n                        return\n                    }\n\n                    switch (event.key) {\n                        case 'b': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'bold')\n                            break\n                        }\n                        case 'i': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'italic')\n                            break\n                        }\n                        case 'u': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'underline')\n                            break\n                        }\n                        case '`': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'code')\n                            break\n                        }\n                        default:\n                            break\n                    }\n                }}\n            />\n        </Slate>\n    )\n}\n\nconst BlockButton = ({ format, icon }) => {\n    const editor = useSlate()\n    return (\n        <span className={'btn' + (FlowEditor.isBlockActive(editor, format) ? ' active' : ' disabled')}\n            onMouseDown={event => {\n                event.preventDefault()\n                FlowEditor.toggleBlock(editor, format)\n            }}\n        >\n            <FontAwesomeIcon icon={icon} fixedWidth />\n        </span>\n    )\n}\n\nconst MarkButton = ({ format, icon }) => {\n    const editor = useSlate()\n    return (\n        <span className={'btn' + (FlowEditor.isMarkActive(editor, format) ? ' active' : ' disabled')}\n            onMouseDown={event => {\n                event.preventDefault()\n                FlowEditor.toggleMark(editor, format)\n            }}\n        >\n            <FontAwesomeIcon icon={icon} fixedWidth />\n        </span>\n    )\n}\n\nReactDOM.render(<Flow />, document.getElementById('editor'))\n\n// If you want your editor to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister()\n"],"sourceRoot":""}