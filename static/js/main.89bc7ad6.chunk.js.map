{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","FlowEditor","isMarkActive","editor","format","marks","Editor","isBlockActive","nodes","n","type","isAlignActive","align","toggleMark","removeMark","addMark","toggleBlock","isActive","Transforms","setNodes","isBlock","toggleAlign","Leaf","attributes","children","leaf","bold","code","italic","underline","strikethrough","subscript","superscript","Element","element","className","FlowEditable","props","useSlate","renderLeaf","useCallback","renderElement","onKeyDown","event","ctrlKey","key","preventDefault","FlowStatus","selection","ln","col","wordCount","charCount","anchor","path","offset","words","positions","at","unit","chars","FlowTools","disabled","icon","faServer","onMouseDown","history","undos","length","faUndo","undo","redos","faRedo","redo","faBold","faItalic","faUnderline","faStrikethrough","faCode","faSubscript","faSuperscript","faParagraph","faHeading","label","faAlignLeft","faAlignCenter","faAlignRight","faAlignJustify","FlowButton","Button","variant","fixedWidth","BlockButton","active","MarkButton","AlignButton","ReactDOM","render","file","useMemo","withHistory","withReact","createEditor","useState","JSON","parse","localStorage","getItem","text","value","setValue","onChange","setItem","stringify","spellCheck","autoFocus","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89bc7ad6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {\n    useMemo,\n    useState,\n    useCallback\n} from \"react\";\n\nimport ReactDOM from 'react-dom'\n\nimport {\n    createEditor,\n    Transforms,\n    Editor\n} from 'slate'\n\nimport {\n    Slate,\n    useSlate,\n    Editable,\n    withReact\n} from 'slate-react'\n\nimport {\n    withHistory\n} from 'slate-history'\n\nimport {\n    Button\n} from 'react-bootstrap'\n\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome'\n\nimport {\n    faBold,\n    faItalic,\n    faUnderline,\n    faStrikethrough,\n    faCode,\n    faSubscript,\n    faSuperscript,\n    faParagraph,\n    faHeading,\n    faAlignLeft,\n    faAlignCenter,\n    faAlignRight,\n    faAlignJustify,\n    faUndo,\n    faRedo,\n    faServer\n} from '@fortawesome/free-solid-svg-icons'\n\nimport * as serviceWorker from './serviceWorker.js'\nimport './index.scss';\n\nconst FlowEditor = {\n    isMarkActive(editor, format) {\n        const marks = Editor.marks(editor)\n        return marks ? marks[format] === true : false\n    },\n\n    isBlockActive(editor, format) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.type === format,\n        })\n\n        return !!match\n    },\n\n    isAlignActive(editor, align) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.align === align,\n        })\n\n        return !!match\n    },\n\n    toggleMark(editor, format) {\n        const isActive = FlowEditor.isMarkActive(editor, format)\n        if (isActive) {\n            Editor.removeMark(editor, format)\n        } else {\n            Editor.addMark(editor, format, true)\n        }\n    },\n\n    toggleBlock(editor, format) {\n        const isActive = FlowEditor.isBlockActive(editor, format)\n        Transforms.setNodes(editor, {\n            type: isActive ? null : format\n        }, {\n            match: n => Editor.isBlock(editor, n)\n        })\n    },\n\n    toggleAlign(editor, format) {\n        const isActive = FlowEditor.isAlignActive(editor, format)\n        Transforms.setNodes(editor, {\n            align: isActive ? null : format\n        }, {\n            match: n => Editor.isBlock(editor, n)\n        })\n    }\n}\n\nconst Flow = props => {\n    const { file } = props\n    const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem(file)) || [{ children: [{ text: '' }] }])\n    return (\n        <Slate\n            editor={editor}\n            value={value}\n            onChange={value => {\n                setValue(value)\n                localStorage.setItem(file, JSON.stringify(value))\n            }}\n        >\n            <FlowTools className='d-print-none sticky-top bg-light' />\n            <FlowEditable className='d-print-block d-print-p-0 p-5 bg-light' spellCheck autoFocus />\n            <FlowStatus className='d-print-none pl-3 fixed-bottom bg-light' />\n        </Slate>\n    )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    if (leaf.strikethrough) {\n        children = <s>{children}</s>\n    }\n\n    if (leaf.subscript) {\n        children = <sub>{children}</sub>\n    }\n\n    if (leaf.superscript) {\n        children = <sup>{children}</sup>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\n\nconst Element = ({ attributes, children, element }) => {\n    switch (element.type) {\n        case 'heading-one':\n            return <h1 className={element.align} {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 className={element.align} {...attributes}>{children}</h2>\n        case 'heading-three':\n            return <h3 className={element.align} {...attributes}>{children}</h3>\n        case 'heading-four':\n            return <h4 className={element.align} {...attributes}>{children}</h4>\n        case 'heading-five':\n            return <h5 className={element.align} {...attributes}>{children}</h5>\n        case 'heading-six':\n            return <h6 className={element.align} {...attributes}>{children}</h6>\n        case 'paragraph':\n            return <p className={element.align} {...attributes}>{children}</p>\n        default:\n            return <div className={element.align + ' text-monospace'} {...attributes}>{children}</div>\n    }\n}\n\nconst FlowEditable = props => {\n    const editor = useSlate()\n\n    const renderLeaf = useCallback(props => {\n        return <Leaf {...props} />\n    }, [])\n\n    const renderElement = useCallback(props => {\n        return <Element {...props} />\n    }, [])\n\n    return (\n        <Editable {...props}\n            renderLeaf={renderLeaf}\n            renderElement={renderElement}\n            onKeyDown={event => {\n                if (event.ctrlKey) {\n                    switch (event.key) {\n                        case 'b': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'bold')\n                            break\n                        }\n                        case 'i': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'italic')\n                            break\n                        }\n                        case 'u': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'underline')\n                            break\n                        }\n                        case '~': {\n                            event.preventDefault()\n                            FlowEditor.toggleMark(editor, 'code')\n                            break\n                        }\n                        default:\n                            break\n                    }\n                }\n            }}\n        />\n    )\n}\n\nconst FlowStatus = props => {\n    const editor = useSlate()\n    const selection = editor.selection\n\n    let ln = 1\n    let col = 1\n    let wordCount = -1\n    let charCount = -1\n    if (selection) {\n        ln = selection.anchor.path[0] + 1\n        col = selection.anchor.offset + 1\n        const words = Editor.positions(editor, {\n            at: editor.selection,\n            unit: 'word'\n        })\n        const chars = Editor.positions(editor, {\n            at: editor.selection,\n            unit: 'character'\n        })\n        for (let _word of words) {\n            wordCount++\n        }\n        for (let _char of chars) {\n            charCount++\n        }\n    }\n\n    return <div {...props}>At Line {ln}, Column {col}, {wordCount} Words and {charCount} Characters in selection</div>\n}\n\nconst FlowTools = props => {\n    const editor = useSlate()\n    return (\n        <div {...props}>\n            <FlowButton disabled icon={faServer} onMouseDown={event => {\n                event.preventDefault()\n            }}\n            />\n            <FlowButton disabled={editor.history.undos.length === 0} icon={faUndo} onMouseDown={event => {\n                event.preventDefault()\n                editor.undo()\n            }}\n            />\n            <FlowButton disabled={editor.history.redos.length === 0} icon={faRedo} onMouseDown={event => {\n                event.preventDefault()\n                editor.redo()\n            }}\n            />\n            <MarkButton format='bold' icon={faBold} />\n            <MarkButton format='italic' icon={faItalic} />\n            <MarkButton format='underline' icon={faUnderline} />\n            <MarkButton format='strikethrough' icon={faStrikethrough} />\n            <MarkButton format='code' icon={faCode} />\n            <MarkButton format='subscript' icon={faSubscript} />\n            <MarkButton format='superscript' icon={faSuperscript} />\n            <BlockButton format='paragraph' icon={faParagraph} />\n            <BlockButton format='heading-one' icon={faHeading} label='lvl1' />\n            <BlockButton format='heading-two' icon={faHeading} label='lvl2' />\n            <BlockButton format='heading-three' icon={faHeading} label='lvl3' />\n            <AlignButton format='text-left' icon={faAlignLeft} />\n            <AlignButton format='text-center' icon={faAlignCenter} />\n            <AlignButton format='text-right' icon={faAlignRight} />\n            <AlignButton format='text-justify' icon={faAlignJustify} />\n        </div>\n    )\n}\n\nconst FlowButton = props => {\n    const { icon, label } = props\n    return (\n        <Button\n            className='rounded-0 border-0'\n            variant='outline-primary'\n            {...props}\n        >\n            <FontAwesomeIcon\n                icon={icon}\n                fixedWidth\n            />\n            {label}\n        </Button>\n    )\n}\n\nconst BlockButton = props => {\n    const { format, icon, label } = props\n    const editor = useSlate()\n    return (\n        <FlowButton\n            icon={icon}\n            label={label}\n            active={FlowEditor.isBlockActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                FlowEditor.toggleBlock(editor, format)\n            }}\n            {...props}\n        />\n    )\n}\n\nconst MarkButton = props => {\n    const { format, icon, label } = props\n    const editor = useSlate()\n    return (\n        <FlowButton\n            icon={icon}\n            label={label}\n            active={FlowEditor.isMarkActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                FlowEditor.toggleMark(editor, format)\n            }}\n            {...props}\n        />\n    )\n}\n\nconst AlignButton = props => {\n    const { format, icon, label } = props\n    const editor = useSlate()\n    return (\n        <FlowButton\n            icon={icon}\n            label={label}\n            active={FlowEditor.isAlignActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                FlowEditor.toggleAlign(editor, format)\n            }}\n            {...props}\n        />\n    )\n}\n\nReactDOM.render(<Flow file='content' />, document.getElementById('editor'))\n\n// If you want your editor to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// See the serviceWorker.js script for details.\nserviceWorker.unregister()\n"],"sourceRoot":""}