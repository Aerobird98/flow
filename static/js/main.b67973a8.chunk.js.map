{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Wordify","props","state","editorState","EditorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","this","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","className","onToggle","onClick","blockStyleFn","customBlockStyleFn","customStyleMap","CUSTOM_STYLEMAP","keyBindingFn","ref","spellCheck","React","Component","block","getType","CODE","fontFamily","BLOCKQUOTE","borderLeft","color","fontStyle","margin","padding","BLOCK_TYPES","label","style","INLINE_STYLES","StyleButton","preventDefault","active","onMouseDown","BlockStyleControls","selection","getSelection","getCurrentContent","getBlockForKey","getStartKey","map","type","key","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCTAC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,YAAaC,cAAYC,eAExC,EAAKC,MAAQ,kBAAM,EAAKC,KAAKC,OAAOF,SACpC,EAAKG,SAAW,SAACN,GAAD,OAAiB,EAAKO,SAAS,CAAEP,iBAEjD,EAAKQ,iBAAmB,EAAKC,kBAAkBC,KAAvB,gBACxB,EAAKC,sBAAwB,EAAKC,uBAAuBF,KAA5B,gBAC7B,EAAKG,gBAAkB,EAAKC,iBAAiBJ,KAAtB,gBACvB,EAAKK,kBAAoB,EAAKC,mBAAmBN,KAAxB,gBAVV,E,+EAaDO,EAASjB,GACvB,IAAMkB,EAAWC,YAAUX,iBAAiBR,EAAaiB,GACzD,QAAIC,IACAE,KAAKd,SAASY,IACP,K,6CAKQG,GACnB,GAAkB,IAAdA,EAAEC,QAWN,OAAOC,+BAAqBF,GAVxB,IAAMG,EAAiBL,YAAUM,MAC7BJ,EACAD,KAAKrB,MAAMC,YACX,GAEAwB,IAAmBJ,KAAKrB,MAAMC,aAC9BoB,KAAKd,SAASkB,K,uCAOTE,GACbN,KAAKd,SACDa,YAAUN,gBACNO,KAAKrB,MAAMC,YACX0B,M,yCAKOC,GACfP,KAAKd,SACDa,YAAUJ,kBACNK,KAAKrB,MAAMC,YACX2B,M,+BAKF,IACE3B,EAAgBoB,KAAKrB,MAArBC,YAER,OACI,yBAAK4B,UAAU,gBACX,kBAAC,EAAD,CACI5B,YAAaA,EACb6B,SAAUT,KAAKP,kBAEnB,kBAAC,EAAD,CACIb,YAAaA,EACb6B,SAAUT,KAAKL,oBAEnB,yBAAKa,UAAU,iBAAiBE,QAASV,KAAKjB,OAC1C,kBAAC,SAAD,CACI4B,aAAcC,EACdC,eAAgBC,EAChBlC,YAAaA,EACbQ,iBAAkBY,KAAKZ,iBACvB2B,aAAcf,KAAKT,sBACnBL,SAAUc,KAAKd,SACf8B,IAAI,SACJC,YAAY,U,GA9EdC,IAAMC,WAsF5B,SAASP,EAAmBQ,GAEX,OADLA,EAAMC,UACM,KAIxB,IAAMP,EAAkB,CACpBQ,KAAM,CACFC,WAAY,0BAEhBC,WAAY,CACRC,WAAY,qBACZC,MAAO,OACPC,UAAW,SACXC,OAAQ,SACRC,QAAS,gBAIXC,EAAc,CAChB,CAAEC,MAAO,KAAMC,MAAO,cACtB,CAAED,MAAO,KAAMC,MAAO,cACtB,CAAED,MAAO,KAAMC,MAAO,gBACtB,CAAED,MAAO,KAAMC,MAAO,eACtB,CAAED,MAAO,KAAMC,MAAO,eACtB,CAAED,MAAO,KAAMC,MAAO,cACtB,CAAED,MAAO,aAAcC,MAAO,cAC9B,CAAED,MAAO,KAAMC,MAAO,uBACtB,CAAED,MAAO,KAAMC,MAAO,qBACtB,CAAED,MAAO,aAAcC,MAAO,eAG5BC,EAAgB,CAClB,CAAEF,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,YAAaC,MAAO,aAC7B,CAAED,MAAO,YAAaC,MAAO,SAG3BE,E,YACF,aAAe,IAAD,8BACV,+CACKzB,SAAW,SAACR,GACbA,EAAEkC,iBACF,EAAKzD,MAAM+B,SAAS,EAAK/B,MAAMsD,QAJzB,E,sEASV,IAAIxB,EAAY,sBAKhB,OAJIR,KAAKtB,MAAM0D,SACX5B,GAAa,yBAIb,0BAAMA,UAAWA,EAAW6B,YAAarC,KAAKS,UACzCT,KAAKtB,MAAMqD,W,GAjBFb,IAAMC,WAuB1BmB,EAAqB,SAAC5D,GAAW,IAC3BE,EAAgBF,EAAhBE,YACF2D,EAAY3D,EAAY4D,eACxBlC,EAAY1B,EACb6D,oBACAC,eAAeH,EAAUI,eACzBtB,UAEL,OACI,yBAAKb,UAAU,oBACVsB,EAAYc,KAAI,SAACC,GAAD,OACb,kBAAC,EAAD,CACIC,IAAKD,EAAKd,MACVK,OAAQS,EAAKb,QAAU1B,EACvByB,MAAOc,EAAKd,MACZtB,SAAU/B,EAAM+B,SAChBuB,MAAOa,EAAKb,aAO1Be,EAAsB,SAACrE,GACzB,IAAMsE,EAAetE,EAAME,YAAYqE,wBAEvC,OACI,yBAAKzC,UAAU,oBACVyB,EAAcW,KAAI,SAACC,GAAD,OACf,kBAAC,EAAD,CACIC,IAAKD,EAAKd,MACVK,OAAQY,EAAaE,IAAIL,EAAKb,OAC9BD,MAAOc,EAAKd,MACZtB,SAAU/B,EAAM+B,SAChBuB,MAAOa,EAAKb,aAOhCmB,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SDnE/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b67973a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding } from 'draft-js';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport '../node_modules/draft-js/dist/Draft.css';\nimport './Wordify.css';\n\nclass Wordify extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { editorState: EditorState.createEmpty() };\n\n        this.focus = () => this.refs.editor.focus();\n        this.onChange = (editorState) => this.setState({ editorState });\n\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    }\n\n    _handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return true;\n        }\n        return false;\n    }\n\n    _mapKeyToEditorCommand(e) {\n        if (e.keyCode === 9 /* TAB */) {\n            const newEditorState = RichUtils.onTab(\n                e,\n                this.state.editorState,\n                4, /* maxDepth */\n            );\n            if (newEditorState !== this.state.editorState) {\n                this.onChange(newEditorState);\n            }\n            return;\n        }\n        return getDefaultKeyBinding(e);\n    }\n\n    _toggleBlockType(blockType) {\n        this.onChange(\n            RichUtils.toggleBlockType(\n                this.state.editorState,\n                blockType\n            )\n        );\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n        this.onChange(\n            RichUtils.toggleInlineStyle(\n                this.state.editorState,\n                inlineStyle\n            )\n        );\n    }\n\n    render() {\n        const { editorState } = this.state;\n\n        return (\n            <div className=\"Wordify-root\">\n                <BlockStyleControls\n                    editorState={editorState}\n                    onToggle={this.toggleBlockType}\n                />\n                <InlineStyleControls\n                    editorState={editorState}\n                    onToggle={this.toggleInlineStyle}\n                />\n                <div className=\"Wordify-editor\" onClick={this.focus}>\n                    <Editor\n                        blockStyleFn={customBlockStyleFn}\n                        customStyleMap={CUSTOM_STYLEMAP}\n                        editorState={editorState}\n                        handleKeyCommand={this.handleKeyCommand}\n                        keyBindingFn={this.mapKeyToEditorCommand}\n                        onChange={this.onChange}\n                        ref=\"editor\"\n                        spellCheck={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction customBlockStyleFn(block) {\n    switch (block.getType()) {\n        default: return null;\n    }\n}\n\nconst CUSTOM_STYLEMAP = {\n    CODE: {\n        fontFamily: '\"Fira Code\", monospace',\n    },\n    BLOCKQUOTE: {\n        borderLeft: '0.25rem solid #eee',\n        color: '#666',\n        fontStyle: 'italic',\n        margin: '1rem 0',\n        padding: '0.5rem 1rem'\n    }\n};\n\nconst BLOCK_TYPES = [\n    { label: 'H1', style: 'header-one' },\n    { label: 'H2', style: 'header-two' },\n    { label: 'H3', style: 'header-three' },\n    { label: 'H4', style: 'header-four' },\n    { label: 'H5', style: 'header-five' },\n    { label: 'H6', style: 'header-six' },\n    { label: 'Blockquote', style: 'blockquote' },\n    { label: 'UL', style: 'unordered-list-item' },\n    { label: 'OL', style: 'ordered-list-item' },\n    { label: 'Code Block', style: 'code-block' },\n];\n\nconst INLINE_STYLES = [\n    { label: 'Bold', style: 'BOLD' },\n    { label: 'Italic', style: 'ITALIC' },\n    { label: 'Underline', style: 'UNDERLINE' },\n    { label: 'Monospace', style: 'CODE' },\n];\n\nclass StyleButton extends React.Component {\n    constructor() {\n        super();\n        this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n        };\n    }\n\n    render() {\n        let className = 'Wordify-styleButton';\n        if (this.props.active) {\n            className += ' Wordify-activeButton';\n        }\n\n        return (\n            <span className={className} onMouseDown={this.onToggle}>\n                {this.props.label}\n            </span>\n        );\n    }\n}\n\nconst BlockStyleControls = (props) => {\n    const { editorState } = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n\n    return (\n        <div className=\"Wordify-controls\">\n            {BLOCK_TYPES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nconst InlineStyleControls = (props) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n\n    return (\n        <div className=\"Wordify-controls\">\n            {INLINE_STYLES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nReactDOM.render(<Wordify />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}