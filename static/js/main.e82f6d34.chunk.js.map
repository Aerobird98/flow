{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Leaf","attributes","children","leaf","bold","code","italic","underline","strike","subscript","superscript","Element","element","type","className","align","FlowEditor","isMarkActive","editor","format","marks","Editor","isBlockActive","nodes","n","isAlignActive","toggleMark","removeMark","addMark","toggleBlock","isActive","Transforms","setNodes","isBlock","changeAlign","FormatButton","toggleFormat","icon","useSlate","role","onMouseDown","event","preventDefault","size","fixedWidth","BlockButton","MarkButton","AlignButton","ReactDOM","render","useMemo","withHistory","withReact","createEditor","useState","JSON","parse","localStorage","getItem","value","setValue","renderLeaf","useCallback","props","renderElement","onChange","content","stringify","setItem","faBold","faItalic","faUnderline","faStrikethrough","faCode","faSubscript","faSuperscript","faHeading","faQuoteLeft","faAlignLeft","faAlignCenter","faAlignRight","faAlignJustify","aria-label","class","href","aria-current","onKeyDown","ctrlKey","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e82f6d34.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useMemo, useState, useCallback } from \"react\";\nimport ReactDOM from 'react-dom'\n\nimport { createEditor, Transforms, Editor } from 'slate'\nimport { Slate, useSlate, Editable, withReact } from 'slate-react'\nimport { withHistory } from 'slate-history'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faBold,\n    faItalic,\n    faUnderline,\n    faStrikethrough,\n    faCode,\n    faSubscript,\n    faSuperscript,\n    faHeading,\n    faQuoteLeft,\n    faAlignLeft,\n    faAlignCenter,\n    faAlignRight,\n    faAlignJustify\n} from '@fortawesome/free-solid-svg-icons'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.scss';\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    if (leaf.strike) {\n        children = <s>{children}</s>\n    }\n\n    if (leaf.subscript) {\n        children = <sub>{children}</sub>\n    }\n\n    if (leaf.superscript) {\n        children = <sup>{children}</sup>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\n\nconst Element = ({ attributes, children, element }) => {\n    switch (element.type) {\n        case 'heading-one':\n            return <h1 className={element.align} {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 className={element.align} {...attributes}>{children}</h2>\n        case 'heading-three':\n            return <h3 className={element.align} {...attributes}>{children}</h3>\n        case 'heading-four':\n            return <h4 className={element.align} {...attributes}>{children}</h4>\n        case 'heading-five':\n            return <h5 className={element.align} {...attributes}>{children}</h5>\n        case 'heading-six':\n            return <h6 className={element.align} {...attributes}>{children}</h6>\n        case 'block-quote':\n            return <blockquote className={element.align} {...attributes}>{children}</blockquote>\n        default:\n            return <p className={element.align} {...attributes}>{children}</p>\n    }\n}\n\nconst FlowEditor = {\n    isMarkActive(editor, format) {\n        const marks = Editor.marks(editor)\n        return marks ? marks[format] === true : false\n    },\n\n    isBlockActive(editor, format) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.type === format,\n        })\n\n        return !!match\n    },\n\n    isAlignActive(editor, align) {\n        const [match] = Editor.nodes(editor, {\n            match: n => n.align === align,\n        })\n\n        return !!match\n    },\n\n    toggleMark(editor, format) {\n        const isActive = FlowEditor.isMarkActive(editor, format)\n        if (isActive) {\n            Editor.removeMark(editor, format)\n        } else {\n            Editor.addMark(editor, format, true)\n        }\n    },\n\n    toggleBlock(editor, format) {\n        const isActive = FlowEditor.isBlockActive(editor, format)\n        Transforms.setNodes(editor,\n            { type: isActive ? null : format },\n            { match: n => Editor.isBlock(editor, n) }\n        )\n    },\n\n    changeAlign(editor, align) {\n        Transforms.setNodes(editor, { align: align })\n    }\n}\n\nconst Flow = () => {\n    const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem('content')) || [])\n\n    const renderLeaf = useCallback(props => {\n        return <Leaf {...props} />\n    }, [])\n\n    const renderElement = useCallback(props => {\n        return <Element {...props} />\n    }, [])\n\n    return (\n        <Slate\n            editor={editor}\n            value={value}\n            onChange={value => {\n                setValue(value)\n                const content = JSON.stringify(value)\n                localStorage.setItem('content', content)\n            }}\n        >\n            <div className='d-print-none sticky-top bg-light'>\n                <MarkButton format='bold' icon={faBold} />\n                <MarkButton format='italic' icon={faItalic} />\n                <MarkButton format='underline' icon={faUnderline} />\n                <MarkButton format='strike' icon={faStrikethrough} />\n                <MarkButton format='code' icon={faCode} />\n                <MarkButton format='subscript' icon={faSubscript} />\n                <MarkButton format='superscript' icon={faSuperscript} />\n                <BlockButton format='heading-one' icon={faHeading} />\n                <BlockButton format='block-quote' icon={faQuoteLeft} />\n                <AlignButton format='text-left' icon={faAlignLeft} />\n                <AlignButton format='text-center' icon={faAlignCenter} />\n                <AlignButton format='text-right' icon={faAlignRight} />\n                <AlignButton format='text-justify' icon={faAlignJustify} />\n                <nav aria-label=\"breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a href=\"#\">Storage</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">content</li>\n                    </ol>\n                </nav>\n            </div>\n            <Editable className='p-5'\n                renderLeaf={renderLeaf}\n                renderElement={renderElement}\n                onKeyDown={event => {\n                    if (event.ctrlKey) {\n                        switch (event.key) {\n                            case 'b': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'bold')\n                                break\n                            }\n                            case 'i': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'italic')\n                                break\n                            }\n                            case 'u': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'underline')\n                                break\n                            }\n                            case '`': {\n                                event.preventDefault()\n                                FlowEditor.toggleMark(editor, 'code')\n                                break\n                            }\n                            default:\n                                break\n                        }\n                    }\n                }}\n            />\n        </Slate>\n    )\n}\n\nconst FormatButton = ({ isActive, toggleFormat, format, icon }) => {\n    const editor = useSlate()\n    return (\n        <span\n            role='button'\n            className={'m-3 btn' + (isActive(editor, format) ? ' active' : '')}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleFormat(editor, format)\n            }}\n        >\n            <FontAwesomeIcon\n                icon={icon}\n                size='lg'\n                fixedWidth\n            />\n        </span>\n    )\n}\n\nconst BlockButton = ({ format, icon }) => {\n    return (\n        <FormatButton\n            isActive={FlowEditor.isBlockActive}\n            toggleFormat={FlowEditor.toggleBlock}\n            format={format}\n            icon={icon}\n        />\n    )\n}\n\nconst MarkButton = ({ format, icon }) => {\n    return (\n        <FormatButton\n            isActive={FlowEditor.isMarkActive}\n            toggleFormat={FlowEditor.toggleMark}\n            format={format}\n            icon={icon}\n        />\n    )\n}\n\nconst AlignButton = ({ format, icon }) => {\n    return (\n        <FormatButton\n            isActive={FlowEditor.isAlignActive}\n            toggleFormat={FlowEditor.changeAlign}\n            format={format}\n            icon={icon}\n        />\n    )\n}\n\nReactDOM.render(<Flow />, document.getElementById('editor'))\n\n// If you want your editor to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// See the serviceWorker.js script for details.\nserviceWorker.unregister()\n"],"sourceRoot":""}